/*
 * Uber API
 *
 * Uber Mock Api Specification
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace UberAPI.Models
{
    /// <summary>
    /// EstimateWithSurge
    /// </summary>
    [DataContract(Name = "EstimateWithSurge")]
    public partial class EstimateWithSurge : IEquatable<EstimateWithSurge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateWithSurge" /> class.
        /// </summary>
        /// <param name="estimate">estimate.</param>
        /// <param name="trip">trip.</param>
        /// <param name="pickupEstimate">The estimate vehicle arrival time in minutes. null if no cars are available..</param>
        public EstimateWithSurge(EstimateWithSurgeEstimate estimate = default(EstimateWithSurgeEstimate), EstimateWithoutSurgeTrip trip = default(EstimateWithoutSurgeTrip), int pickupEstimate = default(int))
        {
            this.Estimate = estimate;
            this.Trip = trip;
            this.PickupEstimate = pickupEstimate;
        }

        /// <summary>
        /// Gets or Sets Estimate
        /// </summary>
        [DataMember(Name = "estimate", EmitDefaultValue = false)]
        public EstimateWithSurgeEstimate Estimate { get; set; }

        /// <summary>
        /// Gets or Sets Trip
        /// </summary>
        [DataMember(Name = "trip", EmitDefaultValue = false)]
        public EstimateWithoutSurgeTrip Trip { get; set; }

        /// <summary>
        /// The estimate vehicle arrival time in minutes. null if no cars are available.
        /// </summary>
        /// <value>The estimate vehicle arrival time in minutes. null if no cars are available.</value>
        [DataMember(Name = "pickup_estimate", EmitDefaultValue = false)]
        public int PickupEstimate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimateWithSurge {\n");
            sb.Append("  Estimate: ").Append(Estimate).Append("\n");
            sb.Append("  Trip: ").Append(Trip).Append("\n");
            sb.Append("  PickupEstimate: ").Append(PickupEstimate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstimateWithSurge);
        }

        /// <summary>
        /// Returns true if EstimateWithSurge instances are equal
        /// </summary>
        /// <param name="input">Instance of EstimateWithSurge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstimateWithSurge input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Estimate == input.Estimate ||
                    (this.Estimate != null &&
                    this.Estimate.Equals(input.Estimate))
                ) && 
                (
                    this.Trip == input.Trip ||
                    (this.Trip != null &&
                    this.Trip.Equals(input.Trip))
                ) && 
                (
                    this.PickupEstimate == input.PickupEstimate ||
                    this.PickupEstimate.Equals(input.PickupEstimate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Estimate != null)
                {
                    hashCode = (hashCode * 59) + this.Estimate.GetHashCode();
                }
                if (this.Trip != null)
                {
                    hashCode = (hashCode * 59) + this.Trip.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PickupEstimate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
