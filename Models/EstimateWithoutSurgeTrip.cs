/*
 * Uber API
 *
 * Uber Mock Api Specification
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace UberAPI.Models
{
    /// <summary>
    /// Estimated distance details.
    /// </summary>
    [DataContract(Name = "EstimateWithoutSurge_trip")]
    public partial class EstimateWithoutSurgeTrip : IEquatable<EstimateWithoutSurgeTrip>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateWithoutSurgeTrip" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EstimateWithoutSurgeTrip() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateWithoutSurgeTrip" /> class.
        /// </summary>
        /// <param name="distanceUnit">The distance unit, either mile or km. (required).</param>
        /// <param name="durationEstimate">Expected activity duration (in seconds). (required).</param>
        /// <param name="distanceEstimate">Expected activity distance. (required).</param>
        public EstimateWithoutSurgeTrip(string distanceUnit = default(string), int durationEstimate = default(int), decimal distanceEstimate = default(decimal))
        {
            this.DistanceUnit = distanceUnit;
            this.DurationEstimate = durationEstimate;
            this.DistanceEstimate = distanceEstimate;
        }

        /// <summary>
        /// The distance unit, either mile or km.
        /// </summary>
        /// <value>The distance unit, either mile or km.</value>
        [DataMember(Name = "distance_unit", IsRequired = true, EmitDefaultValue = true)]
        public string DistanceUnit { get; set; }

        /// <summary>
        /// Expected activity duration (in seconds).
        /// </summary>
        /// <value>Expected activity duration (in seconds).</value>
        [DataMember(Name = "duration_estimate", IsRequired = true, EmitDefaultValue = true)]
        public int DurationEstimate { get; set; }

        /// <summary>
        /// Expected activity distance.
        /// </summary>
        /// <value>Expected activity distance.</value>
        [DataMember(Name = "distance_estimate", IsRequired = true, EmitDefaultValue = true)]
        public decimal DistanceEstimate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimateWithoutSurgeTrip {\n");
            sb.Append("  DistanceUnit: ").Append(DistanceUnit).Append("\n");
            sb.Append("  DurationEstimate: ").Append(DurationEstimate).Append("\n");
            sb.Append("  DistanceEstimate: ").Append(DistanceEstimate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstimateWithoutSurgeTrip);
        }

        /// <summary>
        /// Returns true if EstimateWithoutSurgeTrip instances are equal
        /// </summary>
        /// <param name="input">Instance of EstimateWithoutSurgeTrip to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstimateWithoutSurgeTrip input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DistanceUnit == input.DistanceUnit ||
                    (this.DistanceUnit != null &&
                    this.DistanceUnit.Equals(input.DistanceUnit))
                ) && 
                (
                    this.DurationEstimate == input.DurationEstimate ||
                    this.DurationEstimate.Equals(input.DurationEstimate)
                ) && 
                (
                    this.DistanceEstimate == input.DistanceEstimate ||
                    this.DistanceEstimate.Equals(input.DistanceEstimate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DistanceUnit != null)
                {
                    hashCode = (hashCode * 59) + this.DistanceUnit.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DurationEstimate.GetHashCode();
                hashCode = (hashCode * 59) + this.DistanceEstimate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
