/*
 * Uber API
 *
 * Uber Mock Api Specification
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;

namespace UberAPI.Models
{
    /// <summary>
    /// EstimateWithSurgeEstimateFareBreakdownInner
    /// </summary>
    [DataContract(Name = "EstimateWithSurge_estimate_fare_breakdown_inner")]
    public partial class EstimateWithSurgeEstimateFareBreakdownInner : IEquatable<EstimateWithSurgeEstimateFareBreakdownInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EstimateWithSurgeEstimateFareBreakdownInner" /> class.
        /// </summary>
        /// <param name="lowAmount">Lower bound of the charge..</param>
        /// <param name="highAmount">Upper bound of the charge..</param>
        /// <param name="displayAmount">Formatted string of the breakdown charge. Charges are ranges except for flat charges, which are single numbers..</param>
        /// <param name="displayName">Charge name..</param>
        public EstimateWithSurgeEstimateFareBreakdownInner(decimal lowAmount = default(decimal), decimal highAmount = default(decimal), string displayAmount = default(string), string displayName = default(string))
        {
            this.LowAmount = lowAmount;
            this.HighAmount = highAmount;
            this.DisplayAmount = displayAmount;
            this.DisplayName = displayName;
        }

        /// <summary>
        /// Lower bound of the charge.
        /// </summary>
        /// <value>Lower bound of the charge.</value>
        [DataMember(Name = "low_amount", EmitDefaultValue = false)]
        public decimal LowAmount { get; set; }

        /// <summary>
        /// Upper bound of the charge.
        /// </summary>
        /// <value>Upper bound of the charge.</value>
        [DataMember(Name = "high_amount", EmitDefaultValue = false)]
        public decimal HighAmount { get; set; }

        /// <summary>
        /// Formatted string of the breakdown charge. Charges are ranges except for flat charges, which are single numbers.
        /// </summary>
        /// <value>Formatted string of the breakdown charge. Charges are ranges except for flat charges, which are single numbers.</value>
        [DataMember(Name = "display_amount", EmitDefaultValue = false)]
        public string DisplayAmount { get; set; }

        /// <summary>
        /// Charge name.
        /// </summary>
        /// <value>Charge name.</value>
        [DataMember(Name = "display_name", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EstimateWithSurgeEstimateFareBreakdownInner {\n");
            sb.Append("  LowAmount: ").Append(LowAmount).Append("\n");
            sb.Append("  HighAmount: ").Append(HighAmount).Append("\n");
            sb.Append("  DisplayAmount: ").Append(DisplayAmount).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EstimateWithSurgeEstimateFareBreakdownInner);
        }

        /// <summary>
        /// Returns true if EstimateWithSurgeEstimateFareBreakdownInner instances are equal
        /// </summary>
        /// <param name="input">Instance of EstimateWithSurgeEstimateFareBreakdownInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EstimateWithSurgeEstimateFareBreakdownInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.LowAmount == input.LowAmount ||
                    this.LowAmount.Equals(input.LowAmount)
                ) && 
                (
                    this.HighAmount == input.HighAmount ||
                    this.HighAmount.Equals(input.HighAmount)
                ) && 
                (
                    this.DisplayAmount == input.DisplayAmount ||
                    (this.DisplayAmount != null &&
                    this.DisplayAmount.Equals(input.DisplayAmount))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.LowAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.HighAmount.GetHashCode();
                if (this.DisplayAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayAmount.GetHashCode();
                }
                if (this.DisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.DisplayName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
